#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.5 on Tue Jun 27 14:27:18 2023
#

import wx
import os
import subprocess
import threading

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

IGNORE_FILES = [".gitignore", "upscaled"]

class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        self.input_dir = f"{os.getcwd()}\\images"
        self.output_dir = f"{os.getcwd()}\\images\\upscaled"


        # begin wxGlade: MyFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((800, 600))
        self.SetTitle("frame")

        self.panel_1 = wx.Panel(self, wx.ID_ANY)

        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)

        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)

        label_1 = wx.StaticText(self.panel_1, wx.ID_ANY, "AI Image Upscaler", style=wx.ALIGN_CENTER_HORIZONTAL)
        label_1.SetMinSize((300, 32))
        label_1.SetFont(wx.Font(20, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Haettenschweiler"))
        sizer_2.Add(label_1, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 4)

        sizer_2.Add((200, 20), 0, wx.ALIGN_CENTER_HORIZONTAL, 0)

        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(sizer_3, 0, wx.EXPAND, 0)

        self.tc_input = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_READONLY)
        self.tc_input.SetMinSize((300, 23))
        current_dir = self.input_dir
        self.tc_input.SetValue(current_dir)
        sizer_3.Add(self.tc_input, 0, wx.ALL, 4)

        self.b_input = wx.Button(self.panel_1, wx.ID_ANY, "IN DIR")
        sizer_3.Add(self.b_input, 0, wx.ALL, 4)

        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(sizer_4, 0, wx.EXPAND, 0)

        self.tc_output = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_READONLY)
        self.tc_output.SetMinSize((300, 23))
        current_dir = self.output_dir
        self.tc_output.SetValue(current_dir)
        sizer_4.Add(self.tc_output, 0, wx.ALL, 4)

        self.b_output = wx.Button(self.panel_1, wx.ID_ANY, "OUT DIR")
        sizer_4.Add(self.b_output, 0, wx.ALL, 4)

        sizer_2.Add((200, 30), 0, wx.ALIGN_CENTER_HORIZONTAL, 0)

        sizer_8 = wx.BoxSizer(wx.VERTICAL)
        sizer_2.Add(sizer_8, 1, wx.EXPAND, 0)

        sizer_9 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8.Add(sizer_9, 0, wx.ALL | wx.EXPAND, 4)

        label_4 = wx.StaticText(self.panel_1, wx.ID_ANY, "Let the magic happen!")
        sizer_9.Add(label_4, 0, wx.ALL, 4)

        sizer_9.Add((180, 20), 0, 0, 0)

        self.b_upscale = wx.Button(self.panel_1, wx.ID_ANY, "Upscale")
        sizer_9.Add(self.b_upscale, 0, wx.ALL, 0)

        sizer_8.Add((0, 0), 0, 0, 0)

        sizer_8.Add((0, 0), 0, 0, 0)

        sizer_5 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(sizer_5, 1, wx.EXPAND, 0)

        sizer_6 = wx.BoxSizer(wx.VERTICAL)
        sizer_5.Add(sizer_6, 0, wx.EXPAND, 0)

        sizer_10 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6.Add(sizer_10, 0, wx.ALL | wx.EXPAND, 4)

        label_2 = wx.StaticText(self.panel_1, wx.ID_ANY, "Original Images")
        sizer_10.Add(label_2, 0, wx.ALL, 4)

        def scale_bitmap(bitmap, width, height):
            image = wx.ImageFromBitmap(bitmap)
            image = image.Scale(width, height, wx.IMAGE_QUALITY_HIGH)
            scaled_bitmap = wx.BitmapFromImage(image)
            return scaled_bitmap
        self.b_refresh_in = wx.BitmapButton(self.panel_1, wx.ID_ANY, wx.NullBitmap, style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
        self.b_refresh_in.SetMinSize((20, 20))
        current_dir = f"{os.getcwd()}\\assets"
        scaled = scale_bitmap(wx.Bitmap(f"{current_dir}\\refresh.png", wx.BITMAP_TYPE_ANY), 20, 20)
        self.b_refresh_in.SetBitmap(scaled)
        sizer_10.Add(self.b_refresh_in, 0, wx.ALL, 2)

        self.lb_input = wx.ListBox(self.panel_1, wx.ID_ANY, choices=[], style=wx.LB_MULTIPLE)
        self.lb_input.SetMinSize((400, 250))
        current_dir = self.input_dir
        for filename in os.listdir(current_dir):
            if filename in IGNORE_FILES:
                continue
            self.lb_input.Append(filename)
        sizer_6.Add(self.lb_input, 0, wx.ALL, 4)

        sizer_7 = wx.BoxSizer(wx.VERTICAL)
        sizer_5.Add(sizer_7, 0, wx.EXPAND, 0)

        sizer_11 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_7.Add(sizer_11, 1, wx.EXPAND, 0)

        label_3 = wx.StaticText(self.panel_1, wx.ID_ANY, "Upscaled Images")
        sizer_11.Add(label_3, 0, wx.ALL, 4)

        def scale_bitmap(bitmap, width, height):
            image = wx.ImageFromBitmap(bitmap)
            image = image.Scale(width, height, wx.IMAGE_QUALITY_HIGH)
            scaled_bitmap = wx.BitmapFromImage(image)
            return scaled_bitmap
        self.b_refresh_out = wx.BitmapButton(self.panel_1, wx.ID_ANY, wx.NullBitmap, style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
        self.b_refresh_out.SetMinSize((20, 20))
        current_dir = f"{os.getcwd()}\\assets"
        scaled = scale_bitmap(wx.Bitmap(f"{current_dir}\\refresh.png", wx.BITMAP_TYPE_ANY), 20, 20)
        self.b_refresh_out.SetBitmap(scaled)
        sizer_11.Add(self.b_refresh_out, 0, wx.ALL, 2)

        self.lb_output = wx.ListBox(self.panel_1, wx.ID_ANY, choices=[], style=wx.LB_MULTIPLE)
        self.lb_output.SetMinSize((400, 250))
        current_dir = self.output_dir
        for filename in os.listdir(current_dir):
            if filename in IGNORE_FILES:
                continue
            self.lb_output.Append(filename)
        sizer_7.Add(self.lb_output, 0, wx.ALL, 4)

        self.panel_1.SetSizer(sizer_1)

        self.Layout()

        self.Bind(wx.EVT_BUTTON, lambda event: self.on_change_dir_clicked(event, self.input_dir), self.b_input)
        self.Bind(wx.EVT_BUTTON, lambda event: self.on_change_dir_clicked(event, self.output_dir), self.b_output)
        self.Bind(wx.EVT_BUTTON, self.on_upscale_clicked, self.b_upscale)
        self.Bind(wx.EVT_BUTTON, lambda event: self.on_refresh_clicked(event, self.input_dir), self.b_refresh_in)
        self.Bind(wx.EVT_LISTBOX_DCLICK, lambda event: self.on_item_dclick(event, self.input_dir), self.lb_input)
        self.Bind(wx.EVT_BUTTON, lambda event: self.on_refresh_clicked(event, self.output_dir), self.b_refresh_out)
        self.Bind(wx.EVT_LISTBOX_DCLICK, lambda event: self.on_item_dclick(event, self.output_dir), self.lb_output)
        # end wxGlade
    
    def on_change_dir_clicked(self, event, dir):  # wxGlade: MyFrame.<event_handler>
        dialog = wx.DirDialog(self, message="Choose image output directory", style=wx.DD_DIR_MUST_EXIST, defaultPath=dir)
        
        if dialog.ShowModal() == wx.ID_OK:
            selected_directory = dialog.GetPath()
            if dir == self.input_dir:
                self.tc_input.SetValue(selected_directory)
                self.input_dir = selected_directory
            else:
                self.tc_output.SetValue(selected_directory)
                self.output_dir = selected_directory
        dialog.Destroy()
        event.Skip()

    def run_script(self):
        process = subprocess.Popen("py main.py", stdin=subprocess.PIPE)
        process.communicate(input='\n'.encode())
        current_dir = f"{os.getcwd()}\\images\\upscaled\\"
        for filename in os.listdir(current_dir):
            if filename in IGNORE_FILES:
                continue
            self.lb_output.Append(filename)

    def on_upscale_clicked(self, event):  # wxGlade: MyFrame.<event_handler>
        thread = threading.Thread(target=self.run_script)
        thread.start()
        event.Skip()

    def on_item_dclick(self, event, dir):  # wxGlade: MyFrame.<event_handler>
        subprocess.run(['start', '', os.path.normpath(f"{dir}\\{event.GetString()}")], shell=True)
        event.Skip()
    def on_refresh_clicked(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'on_refresh_clicked' not implemented!")
        event.Skip()
# end of class MyFrame

class AiApp(wx.App):
    def OnInit(self):
        self.frame = MyFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class AiApp

if __name__ == "__main__":
    app = AiApp(0)
    app.MainLoop()
