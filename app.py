#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.5 on Tue Jun 27 14:27:18 2023
#

import wx, os

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((800, 600))
        self.SetTitle("frame")

        self.panel_1 = wx.Panel(self, wx.ID_ANY)

        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)

        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)

        label_1 = wx.StaticText(self.panel_1, wx.ID_ANY, "AI Image Upscaler", style=wx.ALIGN_CENTER_HORIZONTAL)
        label_1.SetMinSize((300, 32))
        label_1.SetFont(wx.Font(20, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Haettenschweiler"))
        sizer_2.Add(label_1, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 4)

        sizer_2.Add((200, 20), 0, wx.ALIGN_CENTER_HORIZONTAL, 0)

        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(sizer_3, 0, wx.EXPAND, 0)

        self.tc_input = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_READONLY)
        self.tc_input.SetMinSize((300, 23))
        sizer_3.Add(self.tc_input, 0, wx.ALL, 4)

        self.b_input = wx.Button(self.panel_1, wx.ID_ANY, "IN DIR")
        sizer_3.Add(self.b_input, 0, wx.ALL, 4)

        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(sizer_4, 0, wx.EXPAND, 0)

        self.tc_output = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_READONLY)
        self.tc_output.SetMinSize((300, 23))
        sizer_4.Add(self.tc_output, 0, wx.ALL, 4)

        self.b_output = wx.Button(self.panel_1, wx.ID_ANY, "OUT DIR")
        sizer_4.Add(self.b_output, 0, wx.ALL, 4)

        sizer_2.Add((200, 30), 0, wx.ALIGN_CENTER_HORIZONTAL, 0)

        sizer_2.Add((0, 0), 0, 0, 0)

        sizer_5 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(sizer_5, 1, wx.EXPAND, 0)

        sizer_6 = wx.BoxSizer(wx.VERTICAL)
        sizer_5.Add(sizer_6, 1, wx.EXPAND, 0)

        label_2 = wx.StaticText(self.panel_1, wx.ID_ANY, "Input Images")
        sizer_6.Add(label_2, 0, wx.ALL, 4)

        gs_input = wx.GridSizer(3, 4, 0, 0)
        sizer_6.Add(gs_input, 1, wx.ALL | wx.EXPAND, 4)

        gs_input.Add((0, 0), 0, 0, 0)

        gs_input.Add((0, 0), 0, 0, 0)

        gs_input.Add((0, 0), 0, 0, 0)

        gs_input.Add((0, 0), 0, 0, 0)

        gs_input.Add((0, 0), 0, 0, 0)

        gs_input.Add((0, 0), 0, 0, 0)

        gs_input.Add((0, 0), 0, 0, 0)

        gs_input.Add((0, 0), 0, 0, 0)

        gs_input.Add((0, 0), 0, 0, 0)

        gs_input.Add((0, 0), 0, 0, 0)

        gs_input.Add((0, 0), 0, 0, 0)

        gs_input.Add((0, 0), 0, 0, 0)

        sizer_5.Add((0, 0), 0, 0, 0)

        self.panel_1.SetSizer(sizer_1)

        self.Layout()

        self.Bind(wx.EVT_BUTTON, self.on_input_dir_clicked, self.b_input)
        self.Bind(wx.EVT_BUTTON, self.on_output_dir_clicked, self.b_output)
        # end wxGlade

    def on_input_dir_clicked(self, event):  # wxGlade: MyFrame.<event_handler>
        dialog = wx.DirDialog(self, message="Choose image input directory", style=wx.DD_DIR_MUST_EXIST)
        
        if dialog.ShowModal() == wx.ID_OK:
            selected_directory = dialog.GetPath()
            self.tc_input.SetValue(selected_directory)
        
        dialog.Destroy()
        event.Skip()

    def on_output_dir_clicked(self, event):  # wxGlade: MyFrame.<event_handler>
        dialog = wx.DirDialog(self, message="Choose image output directory", style=wx.DD_DIR_MUST_EXIST)
        
        if dialog.ShowModal() == wx.ID_OK:
            selected_directory = dialog.GetPath()
            self.tc_output.SetValue(selected_directory)
        
        dialog.Destroy()
        event.Skip()

# end of class MyFrame

class AiApp(wx.App):
    def OnInit(self):
        self.frame = MyFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class AiApp

if __name__ == "__main__":
    app = AiApp(0)
    app.MainLoop()
