#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.5 on Tue Jun 27 14:27:18 2023
#

import wx
import os
import subprocess
import threading
import sys
from config import IGNORE_FILES, SUPPORTED_EXTENSIONS

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

class MainFrame(wx.Frame):
    app_title = "AI Image Upscaler"
    input_dir = f"{os.getcwd()}\\images"
    output_dir = f"{os.getcwd()}\\images\\upscaled"
    assets_dir = f"{os.getcwd()}\\assets"

    class ScriptThread(threading.Thread):
        def __init__(self, input_dir, output_dir, tc_logs, refresh_list):
            threading.Thread.__init__(self)
            self.input_dir = input_dir
            self.output_dir = output_dir
            self.tc_logs = tc_logs
            self.refresh_list = refresh_list
            
        def run(self):
            self.tc_logs.Clear()
            command = ["py", "-u", "main.py", self.input_dir, self.output_dir]
            env = os.environ.copy()
            env["PYTHONUNBUFFERED"] = "1"
            process = subprocess.Popen(command, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True, bufsize=1)
            
            for line in iter(process.stdout.readline, ""):
                wx.CallAfter(self.append_log, line)
            
            process.wait()
            self.refresh_list(self.output_dir)
        
        def append_log(self, line):
            self.tc_logs.AppendText(line)

    def scale_bitmap(self, bitmap, width, height):
        image = bitmap.ConvertToImage()
        image.Rescale(width, height, wx.IMAGE_QUALITY_HIGH)
        scaled_bitmap = wx.Bitmap(image)
        return scaled_bitmap

    def refresh_list(self, dir):
        if dir == self.input_dir:
            self.lb_input.Clear()
        else:
            self.lb_output.Clear()
        for filename in os.listdir(dir):
            extension = filename.split(".")[-1]
            if filename in IGNORE_FILES or extension not in SUPPORTED_EXTENSIONS:
                continue
            if dir == self.input_dir:
                self.lb_input.Append(filename)
            else:
                self.lb_output.Append(filename)

    def __init__(self, *args, **kwds):
        # begin wxGlade: MainFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((800, 600))

        self.panel_1 = wx.Panel(self, wx.ID_ANY)
        self.panel_1.SetMinSize((800, 600))

        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)

        left_block = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(left_block, 0, wx.EXPAND, 0)

        left_block.Add((200, 20), 0, wx.ALIGN_CENTER_HORIZONTAL, 0)

        l_title = wx.StaticText(self.panel_1, wx.ID_ANY, "", style=wx.ALIGN_CENTER_HORIZONTAL)
        l_title.SetMinSize((300, 32))
        l_title.SetFont(wx.Font(20, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Lucida Console"))
        l_title.SetLabel(self.app_title)
        left_block.Add(l_title, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 4)

        left_block.Add((200, 20), 0, wx.ALIGN_CENTER_HORIZONTAL, 0)

        input_section = wx.BoxSizer(wx.HORIZONTAL)
        left_block.Add(input_section, 0, wx.EXPAND, 0)

        self.tc_input = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_READONLY)
        self.tc_input.SetMinSize((300, 23))
        self.tc_input.SetValue(self.input_dir)
        input_section.Add(self.tc_input, 0, wx.ALL, 4)

        self.b_input = wx.Button(self.panel_1, wx.ID_ANY, "IN DIR")
        input_section.Add(self.b_input, 0, wx.ALL, 4)

        output_section = wx.BoxSizer(wx.HORIZONTAL)
        left_block.Add(output_section, 0, wx.EXPAND, 0)

        self.tc_output = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_READONLY)
        self.tc_output.SetMinSize((300, 23))
        self.tc_output.SetValue(self.output_dir)
        output_section.Add(self.tc_output, 0, wx.ALL, 4)

        self.b_output = wx.Button(self.panel_1, wx.ID_ANY, "OUT DIR")
        output_section.Add(self.b_output, 0, wx.ALL, 4)

        left_block.Add((200, 30), 0, wx.ALIGN_CENTER_HORIZONTAL, 0)

        menu = wx.BoxSizer(wx.VERTICAL)
        left_block.Add(menu, 1, wx.EXPAND, 0)

        self.tc_logs = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_BESTWRAP | wx.TE_MULTILINE | wx.TE_READONLY)
        menu.Add(self.tc_logs, 1, wx.ALL | wx.EXPAND, 2)

        options_section = wx.BoxSizer(wx.HORIZONTAL)
        menu.Add(options_section, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)

        self.rb_multiplier = wx.RadioBox(self.panel_1, wx.ID_ANY, "Mulitplier:", choices=["2", "4", "8"], majorDimension=3, style=wx.RA_SPECIFY_COLS)
        self.rb_multiplier.SetMinSize((120, 40))
        self.rb_multiplier.SetSelection(0)
        options_section.Add(self.rb_multiplier, 1, wx.ALL, 4)

        self.b_upscale = wx.Button(self.panel_1, wx.ID_ANY, "Upscale")
        self.b_upscale.SetMinSize((120, 34))
        options_section.Add(self.b_upscale, 1, wx.ALIGN_BOTTOM | wx.ALL, 4)

        right_block = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(right_block, 0, wx.EXPAND, 0)

        input_images = wx.BoxSizer(wx.VERTICAL)
        right_block.Add(input_images, 0, wx.EXPAND, 0)

        input_title_section = wx.BoxSizer(wx.HORIZONTAL)
        input_images.Add(input_title_section, 0, wx.ALL | wx.EXPAND, 0)

        self.b_refresh_in = wx.BitmapButton(self.panel_1, wx.ID_ANY, wx.NullBitmap, style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
        self.b_refresh_in.SetMinSize((20, 20))
        scaled = self.scale_bitmap(wx.Bitmap(f"{self.assets_dir}\\refresh.png", wx.BITMAP_TYPE_ANY), 16, 16)
        self.b_refresh_in.SetBitmap(scaled)
        input_title_section.Add(self.b_refresh_in, 0, wx.BOTTOM | wx.TOP, 2)

        l_input_title = wx.StaticText(self.panel_1, wx.ID_ANY, "Input:")
        input_title_section.Add(l_input_title, 0, wx.ALL, 4)

        self.lb_input = wx.ListBox(self.panel_1, wx.ID_ANY, choices=[], style=wx.LB_MULTIPLE)
        self.lb_input.SetMinSize((400, 250))
        self.refresh_list(self.input_dir)
        input_images.Add(self.lb_input, 0, wx.ALL, 4)

        output_images = wx.BoxSizer(wx.VERTICAL)
        right_block.Add(output_images, 0, wx.EXPAND, 0)

        output_title_section = wx.BoxSizer(wx.HORIZONTAL)
        output_images.Add(output_title_section, 0, wx.EXPAND, 0)

        self.b_refresh_out = wx.BitmapButton(self.panel_1, wx.ID_ANY, wx.NullBitmap, style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
        self.b_refresh_out.SetMinSize((20, 20))
        scaled = self.scale_bitmap(wx.Bitmap(f"{self.assets_dir}\\refresh.png", wx.BITMAP_TYPE_ANY), 16, 16)
        self.b_refresh_out.SetBitmap(scaled)
        output_title_section.Add(self.b_refresh_out, 0, wx.BOTTOM | wx.TOP, 2)

        l_output_title = wx.StaticText(self.panel_1, wx.ID_ANY, "Output:")
        output_title_section.Add(l_output_title, 0, wx.ALL, 4)

        self.lb_output = wx.ListBox(self.panel_1, wx.ID_ANY, choices=[], style=wx.LB_MULTIPLE)
        self.lb_output.SetMinSize((400, 250))
        self.refresh_list(self.output_dir)
        output_images.Add(self.lb_output, 0, wx.ALL, 4)

        self.panel_1.SetSizer(sizer_1)

        self.Layout()
        self.SetTitle(self.app_title)

        self.Bind(wx.EVT_BUTTON, lambda event: self.on_change_dir_clicked(event, self.input_dir), self.b_input)
        self.Bind(wx.EVT_BUTTON, lambda event: self.on_change_dir_clicked(event, self.output_dir), self.b_output)
        self.Bind(wx.EVT_BUTTON, self.on_upscale_clicked, self.b_upscale)
        self.Bind(wx.EVT_BUTTON, lambda event: self.on_refresh_clicked(event, self.input_dir), self.b_refresh_in)
        self.Bind(wx.EVT_LISTBOX_DCLICK, lambda event: self.on_item_dclick(event, self.input_dir), self.lb_input)
        self.Bind(wx.EVT_BUTTON, lambda event: self.on_refresh_clicked(event, self.output_dir), self.b_refresh_out)
        self.Bind(wx.EVT_LISTBOX_DCLICK, lambda event: self.on_item_dclick(event, self.output_dir), self.lb_output)
        # end wxGlade
    
    def on_change_dir_clicked(self, event, dir):  # wxGlade: MainFrame.<event_handler>
        dialog = wx.DirDialog(self, message="Choose image output directory", style=wx.DD_DIR_MUST_EXIST, defaultPath=dir)
        
        if dialog.ShowModal() == wx.ID_OK:
            selected_directory = dialog.GetPath()
            if dir == self.input_dir:
                self.tc_input.SetValue(selected_directory)
                self.input_dir = selected_directory
            else:
                self.tc_output.SetValue(selected_directory)
                self.output_dir = selected_directory
            self.refresh_list(selected_directory)
        dialog.Destroy()
        event.Skip()

    def on_upscale_clicked(self, event):  # wxGlade: MainFrame.<event_handler>
        thread = self.ScriptThread(self.input_dir, self.output_dir, self.tc_logs, self.refresh_list)
        thread.start()
        event.Skip()

    def on_item_dclick(self, event, dir):  # wxGlade: MainFrame.<event_handler>
        subprocess.run(["start", "", os.path.normpath(f"{dir}\\{event.GetString()}")], shell=True)
        event.Skip()

    def on_refresh_clicked(self, event, dir):  # wxGlade: MainFrame.<event_handler>
        self.refresh_list(dir)
        event.Skip()
# end of class MainFrame

class AiApp(wx.App):
    def OnInit(self):
        self.frame = MainFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class AiApp

if __name__ == "__main__":
    app = AiApp(0)
    app.MainLoop()
